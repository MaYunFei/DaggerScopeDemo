// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.yunfei.dagger.components;

import com.example.yunfei.mvp.BaseMvpActivity_MembersInjector;
import com.example.yunfei.mvpdemo.MainActivity;
import com.example.yunfei.mvpdemo.MainActivity_MembersInjector;
import com.example.yunfei.mvpdemo.login.LoginActivity;
import com.example.yunfei.mvpdemo.login.LoginActivity_MembersInjector;
import com.example.yunfei.mvpdemo.login.LoginPresenter;
import dagger.internal.Preconditions;

public final class DaggerActivityComponent implements ActivityComponent {
  private AppComponent appComponent;

  private DaggerActivityComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private LoginPresenter getLoginPresenter() {
    return new LoginPresenter(
        Preconditions.checkNotNull(
            appComponent.getGlobalVariable(),
            "Cannot return null from a non-@Nullable component method"));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appComponent = builder.appComponent;
  }

  @Override
  public void inject(LoginActivity activity) {
    injectLoginActivity(activity);
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  private LoginActivity injectLoginActivity(LoginActivity instance) {
    BaseMvpActivity_MembersInjector.injectMPresenter(instance, getLoginPresenter());
    LoginActivity_MembersInjector.injectGlobalVariable(
        instance,
        Preconditions.checkNotNull(
            appComponent.getGlobalVariable(),
            "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectGlobalVariable(
        instance,
        Preconditions.checkNotNull(
            appComponent.getGlobalVariable(),
            "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private AppComponent appComponent;

    private Builder() {}

    public ActivityComponent build() {
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }
}
